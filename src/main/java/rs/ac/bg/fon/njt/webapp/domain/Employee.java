/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package rs.ac.bg.fon.njt.webapp.domain;

import rs.ac.bg.fon.njt.webapp.domain.enums.Status;
import jakarta.persistence.CascadeType;
import jakarta.persistence.Entity;
import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import java.time.LocalDate;
import java.util.Objects;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

/**
 * Entity class representing a employee. This class is mapped to the 'employee'
 * table in the database.
 *
 * <p>
 * Uses Lombok annotations for boilerplate code reduction:
 * <ul>
 * <li>{@link Data} generates getters, setters, and other utility methods.
 * <li>{@link Builder} provides a builder pattern implementation.
 * <li>{@link NoArgsConstructor} generates a no-args constructor.
 * <li>{@link AllArgsConstructor} generates an all-args constructor.
 * </ul>
 *
 * <p>
 * Includes a custom constructor for setting the firstname, lastname, birthday,
 * department, academic title, education title and status, and overrides for
 * {@code hashCode}, {@code equals}, and {@code toString} methods.
 *
 * @author aleks
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
@Entity
public class Employee {

    /**
     * The unique identifier for the employee. It is auto-generated by the
     * database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    /**
     * The firstname of the employee.
     */
    private String firstname;
    /**
     * The lastname of the employee.
     */
    private String lastname;
    /**
     * The birthday of the employee.
     */
    private LocalDate birthday;
    /**
     * The department the employee belongs to. It is fetched lazily and merged
     * when necessary.
     */
    @ManyToOne(fetch = FetchType.LAZY, cascade = CascadeType.MERGE)
    @JoinColumn(name = "department", referencedColumnName = "id")
    private Department department;
    /**
     * The academic title of the employee. It is fetched lazily and merged when
     * necessary.
     */
    @ManyToOne(fetch = FetchType.LAZY, cascade = CascadeType.MERGE)
    @JoinColumn(name = "academictitle", referencedColumnName = "id")
    private AcademicTitle academicTitle;
    /**
     * The education title of the employee. It is fetched lazily and merged when
     * necessary.
     */
    @ManyToOne(fetch = FetchType.LAZY, cascade = CascadeType.MERGE)
    @JoinColumn(name = "educationtitle", referencedColumnName = "id")
    private EducationTitle educationTitle;
    /**
     * The status of the employee.
     */
    @Enumerated(EnumType.STRING)
    private Status status;

    /**
     * Constructs a new Employee with the specified details.
     *
     * @param firstname the first name of the employee
     * @param lastname the last name of the employee
     * @param birthday the birthday of the employee
     * @param department the department the employee belongs to
     * @param academicTitle the academic title of the employee
     * @param educationTitle the education title of the employee
     * @param status the status of the employee
     */
    public Employee(String firstname, String lastname, LocalDate birthday,
            Department department, AcademicTitle academicTitle, EducationTitle educationTitle, Status status) {
        this.firstname = firstname;
        this.lastname = lastname;
        this.birthday = birthday;
        this.department = department;
        this.academicTitle = academicTitle;
        this.educationTitle = educationTitle;
        this.status = status;
    }

    /**
     * Returns a string representation of this employee. The string
     * representation includes the ID, first name, birthday, department,
     * academic title, education title, and status of the employee.
     *
     * @return a string representation of the employee
     */
    @Override
    public String toString() {
        return id + " " + firstname + " " + birthday + " " + department + " " + academicTitle + " " + educationTitle + " " + status + "";
    }

    /**
     * Computes a hash code for this employee. The hash code is based on a fixed
     * value.
     *
     * @return a hash code value for this object
     */
    @Override
    public int hashCode() {
        int hash = 7;
        return hash;
    }

    /**
     * Compares this employee to the specified object. The result is
     * {@code true} if and only if the argument is not {@code null} and is a
     * {@code Employee} object that has the same {@code id} as this object.
     *
     * @param obj the object to compare this {@code Employee} against
     * @return {@code true} if the given object represents an {@code Employee}
     * equivalent to this employee, {@code false} otherwise
     */
    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final Employee other = (Employee) obj;
        return Objects.equals(this.id, other.id);
    }

}
