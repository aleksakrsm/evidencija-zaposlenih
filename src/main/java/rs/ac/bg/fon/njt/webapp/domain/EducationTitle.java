/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package rs.ac.bg.fon.njt.webapp.domain;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import java.util.Objects;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

/**
 * Entity class representing an education title. This class is mapped to the
 * 'educationtitle' table in the database.
 *
 * <p>
 * Uses Lombok annotations for boilerplate code reduction:
 * <ul>
 * <li>{@link Data} generates getters, setters, and other utility methods.
 * <li>{@link Builder} provides a builder pattern implementation.
 * <li>{@link NoArgsConstructor} generates a no-args constructor.
 * <li>{@link AllArgsConstructor} generates an all-args constructor.
 * </ul>
 *
 * <p>
 * Includes a custom constructor for setting the name, and overrides for
 * {@code hashCode}, {@code equals}, and {@code toString} methods.
 *
 * @author aleks
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "educationtitle")
public class EducationTitle {

    /**
     * The unique identifier for the education title. It is auto-generated by
     * the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    /**
     * The name of the education title.
     */
    private String name;

    /**
     * Constructs an EducationTitle with the specified name.
     *
     * @param name the name of the education title
     */
    public EducationTitle(String name) {
        this.name = name;
    }

    /**
     * Computes a hash code for this education title. The hash code is based on
     * the {@code id} field.
     *
     * @return a hash code value for this object
     */
    @Override
    public int hashCode() {
        int hash = 3;
        hash = 23 * hash + Objects.hashCode(this.id);
        return hash;
    }

    /**
     * Compares this education title to the specified object. The result is
     * {@code true} if and only if the argument is not {@code null} and is an
     * {@code EducationTitle} object that has the same {@code id} as this
     * object.
     *
     * @param obj the object to compare this {@code EducationTitle} against
     * @return {@code true} if the given object represents an
     * {@code EducationTitle} equivalent to this education title, {@code false}
     * otherwise
     */
    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final EducationTitle other = (EducationTitle) obj;
        return Objects.equals(this.id, other.id);
    }

    /**
     * Returns a string representation of this education title. The string
     * representation is the {@code name} of the education title.
     *
     * @return a string representation of the education title
     */
    @Override
    public String toString() {
        return name;
    }
}
