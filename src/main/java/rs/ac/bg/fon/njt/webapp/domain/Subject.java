/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package rs.ac.bg.fon.njt.webapp.domain;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import java.util.Objects;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import rs.ac.bg.fon.njt.webapp.domain.enums.StudiesType;

/**
 * Entity class representing a subject. This class is mapped to the 'subject'
 * table in the database.
 *
 * <p>
 * Uses Lombok annotations for boilerplate code reduction:
 * <ul>
 * <li>{@link Data} generates getters, setters, and other utility methods.
 * <li>{@link Builder} provides a builder pattern implementation.
 * <li>{@link NoArgsConstructor} generates a no-args constructor.
 * <li>{@link AllArgsConstructor} generates an all-args constructor.
 * </ul>
 *
 * <p>
 * Includes a custom constructor for setting the name, ects and studies type,
 * and overrides for {@code hashCode}, {@code equals}, and {@code toString}
 * methods.
 *
 * @author aleks
 */
@Entity
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
@Table(name = "subject")
public class Subject {

    /**
     * The unique identifier for the subject. It is auto-generated by the
     * database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    /**
     * The name of the subject.
     */
    private String name;

    /**
     * The ECTS number of the subject. ECTS stands for the European Credit
     * Transfer System.
     */
    private int ects;

    /**
     * The studies type of the subject.
     */
    @Enumerated(EnumType.STRING)
    @Column(name = "studiestype")
    private StudiesType studiestype;

    /**
     * Constructs a new Subject with the specified name, ECTS number, and
     * studies type.
     *
     * @param name the name of the subject
     * @param ects the ECTS number of the subject
     * @param studiesType the studies type of the subject
     */
    public Subject(String name, int ects, StudiesType studiesType) {
        this.name = name;
        this.ects = ects;
        this.studiestype = studiesType;
    }

    /**
     * Returns a string representation of this subject. The string
     * representation is the name of the subject.
     *
     * @return a string representation of the subject
     */
    @Override
    public String toString() {
        return name;
    }

    /**
     * Computes a hash code for this subject. The hash code is based on the
     * {@code id} field.
     *
     * @return a hash code value for this object
     */
    @Override
    public int hashCode() {
        int hash = 3;
        hash = 13 * hash + Objects.hashCode(this.id);
        return hash;
    }

    /**
     * Compares this subject to the specified object. The result is {@code true}
     * if and only if the argument is not {@code null} and is a {@code Subject}
     * object that has the same {@code id} as this object.
     *
     * @param obj the object to compare this {@code Subject} against
     * @return {@code true} if the given object represents a {@code Subject}
     * equivalent to this subject, {@code false} otherwise
     */
    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final Subject other = (Subject) obj;
        return Objects.equals(this.id, other.id);
    }

}
