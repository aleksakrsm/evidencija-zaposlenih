/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package rs.ac.bg.fon.njt.webapp.domain;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import java.util.Objects;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

/**
 * Entity class representing a department. This class is mapped to the
 * 'department' table in the database.
 *
 * <p>
 * Uses Lombok annotations for boilerplate code reduction:
 * <ul>
 * <li>{@link Data} generates getters, setters, and other utility methods.
 * <li>{@link Builder} provides a builder pattern implementation.
 * <li>{@link NoArgsConstructor} generates a no-args constructor.
 * <li>{@link AllArgsConstructor} generates an all-args constructor.
 * </ul>
 *
 * <p>
 * Includes a custom constructor for setting the name and short name, and
 * overrides for {@code hashCode}, {@code equals}, and {@code toString} methods.
 *
 * @author aleks
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
@Entity
public class Department {

    /**
     * The unique identifier for the department. It is auto-generated by the
     * database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    /**
     * The name of the department.
     */
    private String name;
    /**
     * The short name of the department.
     */
    @Column(name = "shortname")
    private String shortName;

    /**
     * Constructs an Department with the specified name and short name.
     *
     * @param name the name of the department
     * @param shortName the short name of the department
     */
    public Department(String name, String shortName) {
        this.name = name;
        this.shortName = shortName;
    }

    /**
     * Returns a string representation of this department. The string
     * representation is the {@code shortName} of the department.
     *
     * @return a string representation of the department
     */
    @Override
    public String toString() {
        return shortName;
    }

    /**
     * Computes a hash code for this department. This implementation uses a
     * fixed hash code value.
     *
     * @return a hash code value for this object
     */
    @Override
    public int hashCode() {
        int hash = 7;
        return hash;
    }

    /**
     * Compares this department to the specified object. The result is
     * {@code true} if and only if the argument is not {@code null} and is a
     * {@code Department} object that has the same {@code id} as this object.
     *
     * @param obj the object to compare this {@code Department} against
     * @return {@code true} if the given object represents a {@code Department}
     * equivalent to this department, {@code false} otherwise
     */
    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final Department other = (Department) obj;
        return Objects.equals(this.id, other.id);
    }

}
